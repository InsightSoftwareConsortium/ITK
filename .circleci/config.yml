referenced:
  defaults: &defaults
    docker:
     - image: circleci/python:2.7
    working_directory: ~/
    resource_class: large
    environment:
      DASHBOARD_BRANCH_DIRECTORY: /home/circleci/ITK-dashboard
      CTEST_DASHBOARD_ROOT: /home/circleci
      CTEST_SOURCE_DIRECTORY: /home/circleci/ITK
      CTEST_BINARY_DIRECTORY: /home/circleci/ITK-build
      CTEST_BUILD_FLAGS: "-j 4"
      CTEST_CONFIGURATION_TYPE: "Release"
      CTEST_OUTPUT_ON_FAILURE: 1
      PARALLEL_LEVEL: 4
      CCACHE_NODIRECT: 1
      ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
  dependencies: &dependencies
    run:
      name: Dependencies
      command: |
        sudo apt-get install -y rsync ninja-build ccache
        sudo pip install --upgrade pip
        sudo pip install scikit-ci-addons
        ci_addons circle/install_cmake.py 3.9.5
  generate-hash-step: &generate-hash-step
    run:
      name: Generate external data hash
      command: |
        cd ITK
        find . -name \*.md5 -o -name \*.sha512 -print0 | xargs -d "\n" git log -n 1 | tee /home/circleci/external-data.hashable
  restore-data-step: &restore-data-step
     restore_cache:
       keys:
         - 'v1-external-data-{{ checksum "/home/circleci/external-data.hashable" }}'
         - 'v1-external-data'
  restore-ccache-step: &restore-ccache-step
    restore_cache:
      keys:
        - ccache-{{ arch }}-{{ .Branch }}
        - ccache-{{ arch }}-master
  clone-dashboard-step: &clone-dashboard-step
    run:
      name: Cloning dashboard branch
      command: |
        git clone --single-branch ${CIRCLE_REPOSITORY_URL} -b dashboard ${DASHBOARD_BRANCH_DIRECTORY}
  env-step: &env-step
     run:
       name: Additional Environment Variables
       command: |
         echo 'export DASHBOARD_MODEL=$( [[ "$CIRCLE_BRANCH" = "master" || "$CIRCLE_BRANCH" = "next"  || "$CIRCLE_BRANCH" = "release" ]] && echo Continuous || echo Experimental )' >> $BASH_ENV
         echo 'export PATH=/usr/lib/ccache:${PATH}' >> $BASH_ENV
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout:
          path : ~/ITK
      - *generate-hash-step
      - *restore-data-step
      - *restore-ccache-step
      - *clone-dashboard-step
      - *dependencies
      - *env-step
      - run:
          name: CCache initialization
          command: |
            ccache --show-stats
            ccache --zero-stats
            ccache --max-size=2.0G
      - run:
          name: Build and Testing with CTest
          command: |
            ctest -V \
              -DCTEST_CUSTOM_WARNING_EXCEPTION:STRING="itkIndex.h:.*warning: array subscript is above array bounds" \
              -S "${DASHBOARD_BRANCH_DIRECTORY}/circleci.cmake"
      - run:
          name: ccache stats
          when: always
          command: |
            ccache --show-stats
      - run:
          name: Formatting CTest for JUnit
          when: always
          command: |
            env
            mkdir -p /tmp/test-results
            ci_addons ctest_junit_formatter ${CTEST_BINARY_DIRECTORY} > /tmp/test-results/JUnit-${CIRCLE_NODE_INDEX}.xml
      - store_test_results:
          path: /tmp/test-results
          destination: ctest
      - save_cache:
          key: 'ccache-{{ arch }}-{{ .Branch }}-{{ epoch }}'
          paths: [ "/home/circleci/.ccache" ]
      - save_cache:
          key: 'v1-external-data-{{ checksum "/home/circleci/external-data.hashable" }}'
          paths: [ "/home/circleci/.ExternalData" ]

  docs:
    <<: *defaults
    steps:
      - checkout:
          path : ~/ITK
      - *generate-hash-step
      - *restore-data-step
      - *restore-ccache-step
      - *clone-dashboard-step
      - *dependencies
      - *env-step
      - run:
          name: Additional Dependencies
          command: |
            sudo apt-get install -y doxygen graphviz
      - run:
          name: Build and Testing with CTest
          no_output_timeout: 60.0m
          environment:
            CTEST_BUILD_TARGET: "Documentation"
            CTEST_CACHE: "
             BUILD_DOCUMENTATION:BOOL=ON"
          command: |
            ctest -V \
               -DCTEST_TEST_ARGS="INCLUDE;Doxygen" \
               -S "${CTEST_SOURCE_DIRECTORY}/.circleci/circleci.cmake"
      - run:
          name: Archiving directory for artifact
          when: always
          command: |
            cd ${CTEST_BINARY_DIRECTORY}/Utilities/Doxygen
            tar -zcvf ~/itk_doxygen_html.tar.gz html
      - store_artifacts:
          path: /home/circleci/itk_doxygen_html.tar.gz
workflows:
  version: 2
  build_and_test:
    jobs:
      - docs
      - build
