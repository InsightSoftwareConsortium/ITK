# Build triggered on a rolling or batch basis on the master and release branches. They may take longer than the standard CI configurations.

name: ITK.Coverage

trigger:
  batch: true
  branches:
    include:
    - master
    - release*
pr: none

variables:
  ExternalDataVersion: 5.1.0
jobs:
  - job: Windows
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 300
    strategy:
      maxParallel: 2
      matrix:
        v140:
          CTEST_CMAKE_GENERATOR_TOOLSET: v140
          CTEST_CMAKE_GENERATOR_PLATFORM: x64
          CTEST_CONFIGURATION_TYPE: Release
          CTEST_CMAKE_GENERATOR: "Visual Studio 15 2017"
          imageName: 'vs2017-win2016'
        v142:
          CTEST_CMAKE_GENERATOR_TOOLSET: v142
          CTEST_CMAKE_GENERATOR_PLATFORM: x64
          CTEST_CONFIGURATION_TYPE: Release
          CTEST_CMAKE_GENERATOR: "Visual Studio 16 2019"
          imageName: 'windows-2019'
    pool:
      vmImage: $(imageName)
    steps:
      - checkout: self
        clean: true
        fetchDepth: 5

      - script: |
          if DEFINED SYSTEM_PULLREQUEST_SOURCECOMMITID git checkout $(System.PullRequest.SourceCommitId)
        displayName: Checkout pull request HEAD

      - script: |
          pip3 install ninja
          pip3 install --upgrade setuptools
          pip3 install scikit-ci-addons
        displayName: 'Install dependencies'

      - script: |
          git clone -b dashboard --single-branch https://github.com/InsightSoftwareConsortium/ITK.git ITK-dashboard

          curl -L https://github.com/InsightSoftwareConsortium/ITK/releases/download/v$(ExternalDataVersion)/InsightData-$(ExternalDataVersion).tar.gz -O
          cmake -E tar xfz InsightData-$(ExternalDataVersion).tar.gz
          cmake -E rename InsightToolkit-$(ExternalDataVersion)/.ExternalData/MD5 $(Build.SourcesDirectory)/.ExternalData/MD5
        workingDirectory: $(Agent.BuildDirectory)
        displayName: 'Download dashboard script and testing data'

      - bash: |
          cat > dashboard.cmake << EOF
          set(CTEST_BUILD_CONFIGURATION "$(CTEST_CONFIGURATION_TYPE)")
          set(CTEST_CMAKE_GENERATOR_TOOLSET "$(CTEST_CMAKE_GENERATOR_TOOLSET)")
          set(CTEST_CMAKE_GENERATOR_PLATFORM "$(CTEST_CMAKE_GENERATOR_PLATFORM)")
          set(CTEST_CMAKE_GENERATOR "$(CTEST_CMAKE_GENERATOR)")
          set(dashboard_cache "
            BUILD_SHARED_LIBS:BOOL=ON
            BUILD_EXAMPLES:BOOL=OFF
            ITK_WRAP_PYTHON:BOOL=OFF
          ")
          include(\$ENV{AGENT_BUILDDIRECTORY}/ITK-dashboard/azure_dashboard.cmake)
          EOF
          cat dashboard.cmake
        workingDirectory: $(Agent.BuildDirectory)/ITK-dashboard
        displayName: 'Configure CTest script'

      - script: |
          cmake --version
          ctest -S $(Agent.BuildDirectory)/ITK-dashboard/dashboard.cmake -VV -j 4
        displayName: 'Build and test'
        env:
          CTEST_OUTPUT_ON_FAILURE: 1

      - script: |
          ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'

      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'

  - job: Linux
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 300
    pool:
      vmImage: 'Ubuntu-18.04'

    steps:
      - checkout: self
        clean: true
        fetchDepth: 5
      - bash: |
          set -x
          if [ -n "$(System.PullRequest.SourceCommitId)" ]; then
            git checkout $(System.PullRequest.SourceCommitId)
          fi
        displayName: 'Checkout pull request HEAD'
      - bash: |
          set -x
          sudo apt-get update
          sudo apt-get install -y python3-venv
          sudo python3 -m pip install --upgrade setuptools
          sudo python3 -m pip install scikit-ci-addons
        displayName: 'Install dependencies'
      - bash: |
          set -x
          git clone -b dashboard --single-branch https://github.com/InsightSoftwareConsortium/ITK.git ITK-dashboard

          curl -L https://github.com/InsightSoftwareConsortium/ITK/releases/download/v$(ExternalDataVersion)/InsightData-$(ExternalDataVersion).tar.gz -O
          cmake -E tar xfz InsightData-$(ExternalDataVersion).tar.gz
          cmake -E rename InsightToolkit-$(ExternalDataVersion)/.ExternalData/MD5 $(Build.SourcesDirectory)/.ExternalData/MD5
        workingDirectory: $(Agent.BuildDirectory)
        displayName: 'Download dashboard script and testing data'
      - bash: |
          cat > dashboard.cmake << EOF
          set(CTEST_BUILD_CONFIGURATION "Debug")
          set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
          set(CTEST_BUILD_FLAGS -j2)
          set(CTEST_COVERAGE_COMMAND "/usr/bin/gcov")
          set(BUILD_NAME_SUFFIX "-gcov")
          set(dashboard_do_coverage 1)
          set(dashboard_cache "
            BUILD_TESTING:BOOL=ON
            BUILD_SHARED_LIBS:BOOL=OFF
            BUILD_EXAMPLES:BOOL=OFF
            BUILD_DOCUMENTS:BOOL=OFF
            ITK_WRAP_PYTHON:BOOL=OFF
            CMAKE_CXX_FLAGS:STRING=-g -O0 -fprofile-arcs -ftest-coverage
            CMAKE_C_FLAGS:STRING=-g -O0 -fprofile-arcs -ftest-coverage
            CMAKE_EXE_LINKER_FLAGS:STRING=-g -O0 -fprofile-arcs -ftest-coverage
          ")
          include($(Agent.BuildDirectory)/ITK-dashboard/azure_dashboard.cmake)
          EOF
          cat dashboard.cmake
        workingDirectory: $(Agent.BuildDirectory)/ITK-dashboard
        displayName: 'Configure CTest script'
      - bash: |
          ctest -S $(Agent.BuildDirectory)/ITK-dashboard/dashboard.cmake -VV
        displayName: 'Build and test with coverage'
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS: 2
      - script: |
          ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
        condition: succeededOrFailed()
        displayName: 'Format CTest output in JUnit format'

      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
          testRunTitle: 'CTest $(Agent.OS)'
        condition: succeededOrFailed()
        displayName: 'Publish test results'
