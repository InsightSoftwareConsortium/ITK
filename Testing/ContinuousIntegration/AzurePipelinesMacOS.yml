name: ITK.macOS

trigger:
  branches:
    include:
    - main
    - release*
  paths:
    exclude:
    - '*.md'
    - LICENSE
    - NOTICE
    - Documentation/*
    - Utilities/Debugger/*
    - Utilities/ITKv5Preparation/*
    - Utilities/Maintenance/*
pr:
  paths:
    exclude:
    - '*.md'
    - LICENSE
    - NOTICE
    - Documentation/*
    - Utilities/Debugger/*
    - Utilities/ITKv5Preparation/*
    - Utilities/Maintenance/*
variables:
  ExternalDataVersion: 5.4.3
jobs:
- job: macOS
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300
  pool:
    # https://github.com/actions/runner-images?tab=readme-ov-file#available-images
    vmImage: macos-13
  steps:
    - checkout: self
      clean: true
      fetchDepth: 5
    - bash: |
        set -x
        if [ -n "$(System.PullRequest.SourceCommitId)" ]; then
          git checkout $(System.PullRequest.SourceCommitId)
        fi
      displayName: Checkout pull request HEAD

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        architecture: 'x64'

    - bash: |
        set -x
        sudo python3 -m pip install ninja
        sudo python3 -m pip install --upgrade setuptools
        sudo python3 -m pip install scikit-ci-addons
        sudo python3 -m pip install lxml
      displayName: Install dependencies

    - bash: |
        set -x
        git clone -b dashboard --single-branch https://github.com/InsightSoftwareConsortium/ITK.git ITK-dashboard

        curl -L https://github.com/InsightSoftwareConsortium/ITK/releases/download/v$(ExternalDataVersion)/InsightData-$(ExternalDataVersion).tar.gz -O
        cmake -E tar xfz InsightData-$(ExternalDataVersion).tar.gz
        cmake -E rename InsightToolkit-$(ExternalDataVersion)/.ExternalData/CID $(Build.SourcesDirectory)/.ExternalData/CID
      workingDirectory: $(Agent.BuildDirectory)
      displayName: 'Download dashboard script and testing data'

    - bash: |
        cat > dashboard.cmake << EOF
        set(CTEST_BUILD_CONFIGURATION "Release")
        set(CTEST_CMAKE_GENERATOR "Ninja")
        set(dashboard_cache "
          BUILD_SHARED_LIBS:BOOL=ON
          BUILD_EXAMPLES:BOOL=ON
          ITK_WRAP_PYTHON:BOOL=OFF
        ")
        include(\$ENV{AGENT_BUILDDIRECTORY}/ITK-dashboard/azure_dashboard.cmake)
        EOF
        cat dashboard.cmake
      workingDirectory: $(Agent.BuildDirectory)/ITK-dashboard
      displayName: 'Configure CTest script'

    - bash: |
        set -x

        c++ --version
        cmake --version

        ctest -S $(Agent.BuildDirectory)/ITK-dashboard/dashboard.cmake -VV -j 4
      displayName: 'Build and test'
      env:
        CTEST_OUTPUT_ON_FAILURE: 1

    - script: |
        ci_addons ctest_junit_formatter $(Build.SourcesDirectory)-build > $(Agent.BuildDirectory)/JUnitTestResults.xml
      condition: succeededOrFailed()
      displayName: 'Format CTest output in JUnit format'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: "$(Agent.BuildDirectory)/JUnitTestResults.xml"
        testRunTitle: 'CTest $(Agent.OS)'
      condition: succeededOrFailed()
      displayName: 'Publish test results'


- job: PerformanceMacOS
  displayName: 'macOS Performance Benchmarks'
  timeoutInMinutes: 0
  cancelTimeoutInMinutes: 300
  pool:
    vmImage: macos-11
  steps:
    - checkout: self
      clean: true
      fetchDepth: 5
    - bash: |
        set -x
        if [ -n "$(System.PullRequest.SourceCommitId)" ]; then
          git checkout $(System.PullRequest.SourceCommitId)
        fi
      displayName: Checkout pull request HEAD

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        architecture: 'x64'

    - bash: |
        set -x
        python -m pip install ninja
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install scikit-ci-addons
      displayName: 'Install dependencies'

    - script: |
        mkdir ITK-build
        cd ITK-build
        cmake -DCMAKE_C_COMPILER:FILEPATH="clang" -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_TESTING:BOOL=OFF -GNinja $(Build.SourcesDirectory)
        ninja
      workingDirectory: $(Agent.BuildDirectory)
      displayName: 'Build ITK'

    - bash: |
        set -x
        git clone --single-branch https://github.com/InsightSoftwareConsortium/ITKPerformanceBenchmarking.git
      workingDirectory: $(Agent.BuildDirectory)
      displayName: 'Download performance benchmarks'

    - script: |
        set -x

        c++ --version
        cmake --version

        mkdir ITKPerformanceBenchmarking-build
        cd ITKPerformanceBenchmarking-build
        cmake -DCMAKE_C_COMPILER:FILEPATH="clang" -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_TESTING:BOOL=OFF -GNinja -DITK_DIR:PATH=$(Agent.BuildDirectory)/ITK-build $(Agent.BuildDirectory)/ITKPerformanceBenchmarking
        ninja
      workingDirectory: $(Agent.BuildDirectory)
      displayName: 'Build performance benchmarks module'

    - bash: |
        set -x

        c++ --version
        cmake --version

        python ./ITKPerformanceBenchmarking/evaluate-itk-performance.py run --rev-list HEAD~1.. $(Build.SourcesDirectory) $(Agent.BuildDirectory)/ITK-build $(Agent.BuildDirectory)/ITKPerformanceBenchmarking-build

        cd $(Build.SourcesDirectory)
        git fetch --unshallow
        git branch master-unshallow origin/master
        merge_base=`git merge-base master-unshallow $(System.PullRequest.SourceCommitId)`
        if [[ -z "${merge_base}" ]]; then
           echo "Could not determine the merge base. Was this topic branched from upstream/master?"
           exit 1
        fi
        cd -

        python ./ITKPerformanceBenchmarking/evaluate-itk-performance.py run --rev-list ${merge_base}~1..${merge_base} $(Build.SourcesDirectory) $(Agent.BuildDirectory)/ITK-build $(Agent.BuildDirectory)/ITKPerformanceBenchmarking-build

        cd $(Agent.BuildDirectory)/ITKPerformanceBenchmarking-build
        find ..
        tar cvzf BenchmarkResults.macOS.tar.gz BenchmarkResults
        mv BenchmarkResults.macOS.tar.gz $(Agent.BuildDirectory)
      workingDirectory: $(Agent.BuildDirectory)
      displayName: 'Evaluate performance benchmarks'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'MacOSBenchmarkResults'
        targetPath: '$(Agent.BuildDirectory)/BenchmarkResults.macOS.tar.gz'
