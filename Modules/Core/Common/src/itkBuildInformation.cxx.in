/*=========================================================================
 *
 *  Copyright Insight Software Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/

#include "itkBuildInformation.h"
#include "itkObjectFactory.h"

#include <algorithm>

// Construct const versions via the emplace method.  This macro simplifies the text
// written in ITK/Modules/Core/Common/src/CMakeLists.txt.
#define MAKE_MAP_ENTRY(KEY, VALUE, DESCRIPTION )                                          \
m_Map.emplace(                                                                            \
  std::pair< MapKeyType, InformationValueType>(                                           \
    MapKeyType{ KEY },                                                                    \
    InformationValueType{ MapValueType{ VALUE }, MapValueDescriptionType{ DESCRIPTION } } \
  )                                                                                       \
)

namespace itk {

std::mutex BuildInformation::m_Mutex;
BuildInformation::Pointer BuildInformation::m_InformationInstance;
BuildInformation::MapType BuildInformation::m_Map;

BuildInformation::Pointer
BuildInformation
::New()
{
  return Self::GetInstance();
}

BuildInformation::Pointer
BuildInformation
::GetInstance()
{
  std::lock_guard<std::mutex> mutexHolder(m_Mutex);
  if (m_InformationInstance.IsNull())
  {
    m_InformationInstance = ObjectFactory<Self>::Create();
    {
      new BuildInformation(); //constructor sets m_InformationInstance
    }
  }
  return m_InformationInstance;
}

const BuildInformation::MapType &
BuildInformation::GetMap()
{
  return BuildInformation::GetInstance()->m_Map;
}

const BuildInformation::MapValueType
BuildInformation::GetValue(const MapKeyType &&key)
{
  const MapType &localMap = BuildInformation::GetInstance()->GetMap();

  auto it = localMap.find(key);
  if (it != localMap.end())
  {
    return it->second.m_Value;
  }
  return {""};
}

const BuildInformation::MapValueDescriptionType
BuildInformation::GetDescription(const MapKeyType && key)
{
  const MapType &localMap = BuildInformation::GetInstance()->GetMap();

  auto it = localMap.find(key);
  if (it != localMap.end())
  {
    return it->second.m_Description;
  }
  return {""};
}

const std::vector<  BuildInformation::MapKeyType >
BuildInformation::GetAllKeys()
{
  std::vector< BuildInformation::MapKeyType > keyVector;
  keyVector.reserve(30);
  for( auto elem : BuildInformation::GetInstance()->m_Map )
  {
    keyVector.emplace_back( elem.first );
  }
  return keyVector;
}

BuildInformation
::BuildInformation()
{
  m_InformationInstance = this; //threads need this
  m_InformationInstance->UnRegister(); // Remove extra reference

  @MAPPING_VALUES@
}

} //end namespace itk
