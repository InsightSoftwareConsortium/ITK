itk_wrap_class("itk::ImageToImageFilter" POINTER)
  # Wrap from each scalar type to each other, and also to uchar (for 8-bit saving)
  # and to ulong (for watershed).
  UNIQUE(from_types "UC;${WRAP_ITK_SCALAR}")
  UNIQUE(to_types "UC;UL;${ITKM_IT};${WRAP_ITK_SCALAR}")
  itk_wrap_image_filter_combinations("${from_types}" "${to_types}")

  # Wrap from ulong to other integral types, even if ulong isn't wrapped. This
  # is needed for the relabel components image filter.
  if(NOT ITK_WRAP_unsigned_long)
    itk_wrap_image_filter_combinations("${ITKM_IT}" "${WRAP_ITK_INT}")
  endif()

  UNIQUE(to_types "UC;${WRAP_ITK_SCALAR}")
  foreach(d ${ITK_WRAP_IMAGE_DIMS})
    foreach(t ${to_types})
      itk_wrap_template("${ITKM_VI${t}${d}}${ITKM_VI${t}${d}}" "${ITKT_VI${t}${d}},${ITKT_VI${t}${d}}")
    endforeach()
  endforeach()

  # Vector types
  itk_wrap_image_filter_combinations("${WRAP_ITK_VECTOR}" "${WRAP_ITK_VECTOR}")

  # VectorImage <-> vector
  foreach(d ${ITK_WRAP_IMAGE_DIMS})
    if(ITK_WRAP_vector_float)
      itk_wrap_template("${ITKM_IVF${d}${d}}${ITKM_VIF${d}}" "${ITKT_IVF${d}${d}},${ITKT_VIF${d}}")
    endif()
    if(ITK_WRAP_vector_double)
      itk_wrap_template("${ITKM_IVD${d}${d}}${ITKM_VID${d}}" "${ITKT_IVD${d}${d}},${ITKT_VID${d}}")
    endif()
  endforeach()

  # For GradientRecursiveGaussianImageFilter we need some specific combinations
  foreach(image_dim ${ITK_WRAP_IMAGE_DIMS})
    foreach(input_vector_dim ${ITK_WRAP_VECTOR_COMPONENTS})
      math(EXPR output_vector_dim ${input_vector_dim}*2)
      list(FIND ITK_WRAP_VECTOR_COMPONENTS "${output_vector_dim}" index)
      if(index GREATER -1)
        foreach(t ${WRAP_ITK_VECTOR_REAL})
          foreach(cv ${WRAP_ITK_COV_VECTOR_REAL})
            itk_wrap_template(
              "${ITKM_I${t}${input_vector_dim}${image_dim}}${ITKM_I${cv}${output_vector_dim}${image_dim}}"
              "${ITKT_I${t}${input_vector_dim}${image_dim}},${ITKT_I${cv}${output_vector_dim}${image_dim}}")
          endforeach()
        endforeach()
      endif()
    endforeach()
  endforeach()

  # RGB types
  UNIQUE(rgb "RGBUC;${WRAP_ITK_RGB}")
  itk_wrap_image_filter_combinations("${rgb}" "${rgb}")

  # RGBA types
  UNIQUE(rgba "RGBAUC;${WRAP_ITK_RGBA}")
  itk_wrap_image_filter_combinations("${rgba}" "${rgba}")

itk_end_wrap_class()
